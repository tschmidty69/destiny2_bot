
# import the necessary packages
import win32gui
#import keyboard as keyboard
#import pygame as pygame
#import pythoncom
#import win32con
from PIL import ImageGrab, Image
from imutils.video import VideoStream, FPS
import numpy as np
import argparse
import imutils
import time
import cv2
import pyautogui
import logging
import keyboard

import destiny2_bot_ui_state
from destiny2_bot_osd import destiny2_bot_osd

# construct the argument parse and parse the arguments

# replace this with the url generated by the Wyze app
rtsp_url = "rtsp://wyzecampan:catdog2020@192.168.1.65/live"

ap = argparse.ArgumentParser()
# ap.add_argument("-i", "--image",
# 	default="test2.jpg", help="path to the input image")
# ap.add_argument("--cascade",
# 	default="opencv\data\haarcascades\haarcascade_frontalcatface_extended.xml",
# 	help="path to cat detector haar cascade")
ap.add_argument("-d", "--debug", action="store_true", default=False,
                help="debugging output")

args = ap.parse_args()

if not args.debug:
    logging.basicConfig(level=logging.INFO)

def main():
    # initialize the video stream
    # and initialize the FPS counter
    #logging.info("starting video stream...")
    frame = None

    # src=0 is default web cam
    #vs = VideoStream(src=0).start()

    screenWidth, screenHeight = pyautogui.size()
    screenRatio = screenWidth/screenHeight

    logging.info("screenWith: {}x{}, format: {:.2f}:1".format(screenWidth,
                screenHeight, screenRatio))

    logging.info("Creating output window")
    cv2.namedWindow("Output", cv2.WINDOW_NORMAL)
    # scaling the screen to 70% for second monitor...
    cv2.resizeWindow('Output', (int(screenWidth*.70), int(screenHeight*.70)))
    cv2.moveWindow('Output', -1440, 200)
    try:
        destiny_window = win32gui.FindWindow(None, "Destiny 2")
        win32gui.SetForegroundWindow(destiny_window)
    except:
        logging.debug("Couldn't find Destiny 2 window, is it running?")
        cv2.destroyAllWindows()
        #exit(1)

    osd = destiny2_bot_osd(screenWidth, screenHeight)

    # Add keyboard hotkeys
    keyboard.add_hotkey('ctrl+shift+a', osd.add_console, args=['ctrl+shift+a pressed'])

    # START EVENT LOOP
    while True:
        # grab a screenshot of the desktop
        frame = np.array(ImageGrab.grab(bbox=(0, 40,
                        screenWidth, screenHeight)))

        osd.fps_update(frame)
        osd.write_console(frame)

        # show the output frame
        # scale frame to window
        rect = cv2.getWindowImageRect('Output')
        im_scaled = cv2.resize(frame, (rect[2], rect[3]))
        # convert frame back to RGB to display correctly
        RGB_img = cv2.cvtColor(im_scaled, cv2.COLOR_BGR2RGB)
        cv2.imshow("Output", RGB_img)

        key = cv2.waitKey(1) & 0xFF

        # if the `q` key was pressed, break from the loop
        if key == ord("q"):
            break

    # do a bit of cleanup
    logging.info("exiting")
    cv2.destroyAllWindows()

if __name__=="__main__":
    main()
